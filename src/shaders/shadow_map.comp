#version 450
layout(local_size_x = 16, local_size_y = 16) in;

struct PointLight {
    vec3 position;
    vec3 emission;
};

precision highp samplerCube;
layout(set=0, binding=0, r32f) uniform image2D color_buf;
layout(set=0, binding=1) uniform sampler s_sampler;
layout(set=0, binding=2) uniform textureCube shadow_map;
layout(set=0, binding=3)  uniform PointLightData {
    PointLight light;
};

layout(set=1, binding=0) uniform texture2D t_depth;
layout(set=1, binding=1,rgba32f)  readonly uniform image2D t_normal;
layout(set=1, binding=2,rgba32f)  readonly uniform image2D t_world_pos;



layout( push_constant ) uniform PushConstants {
  int light_idx;
  int image_width;
  int image_height;
};

float origin()      { return 1.0 / 32.0; }
float float_scale() { return 1.0 / 65536.0; }
float int_scale()   { return 256.0; }

// Normal points outward for rays exiting the surface, else is flipped.
vec3 offset_ray(const vec3 p, const vec3 n)
{
  ivec3 of_i = ivec3(int_scale() * n.x, int_scale() * n.y, int_scale() * n.z);

  vec3 p_i = vec3( 
      intBitsToFloat(floatBitsToInt(p.x)+((p.x < 0.0) ? -of_i.x : of_i.x)),
      intBitsToFloat(floatBitsToInt(p.y)+((p.y < 0.0) ? -of_i.y : of_i.y)),
      intBitsToFloat(floatBitsToInt(p.z)+((p.z < 0.0) ? -of_i.z : of_i.z)));

  return vec3(abs(p.x) < origin() ? p.x+ float_scale()*n.x : p_i.x,
                abs(p.y) < origin() ? p.y+ float_scale()*n.y : p_i.y,
                abs(p.z) < origin() ? p.z+ float_scale()*n.z : p_i.z);
}
void main(){
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    ivec2 image_size = imageSize(color_buf);
    if(any(greaterThanEqual(pixel, ivec2(image_width, image_height))))
        return;
    vec3 x = imageLoad(t_world_pos, pixel).xyz;
    vec3 normal = imageLoad(t_normal, pixel).xyz;
    vec3 offset_x = offset_ray(x, normal);
    bool in_shadow = false;
    
    vec3 wi = (light.position - x);
    float dist_sqr = dot(wi, wi);
    float dist = sqrt(dist_sqr);
    wi /= dist;

    float shadow_depth = texture(samplerCube(shadow_map, s_sampler), -vec3(-wi.x,wi.yz)).x;
    vec3 L = vec3(0);


    in_shadow = length(light.position - offset_x) * 0.95 >= shadow_depth;
    
    if(!in_shadow ) {
        
        L += vec3(1) * max(0.0,dot(normal, wi)) / dist_sqr;
    }
    imageStore(color_buf, pixel, vec4(L, 1.0));
}
